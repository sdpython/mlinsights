[project]
authors = [{name="Xavier DuprÃ©", email="xavier.dupre@gmail.com"}]
classifiers = [
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: C",
    "Programming Language :: Python",
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    "Development Status :: 5 - Production/Stable",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = ["numpy", "onnx>=1.14.0", "scipy"]
description = "Extends the list of supported operators in onnx reference implementation and onnxruntime, or implements faster versions in C++."
keywords = ["onnx", "cython", "scikit-learn", "machine-learning"]
license = {file = "LICENSE.txt"}
name = "mlinsights"
readme = "README.rst"
requires-python = ">=3.9"
version = "0.5.1"

[project.urls]
homepage = "https://sdpython.github.io/doc/mlinsights/dev/"
documentation = "https://sdpython.github.io/doc/mlinsights/dev/"
repository = "https://github.com/sdpython/mlinsights/"
changelog = "https://sdpython.github.io/doc/mlinsights/dev/CHANGELOGS.html"

[project.optional-dependencies]
dev = [
    "black",
    "clang-format",
    "cmakelang",
    "coverage",
    "cython>=3.0.10",
    "cython-lint",
    "furo",
    "isort",
    "joblib",
    "lightgbm",
    "matplotlib",
    "numpy>=2.0",
    "onnx-array-api",
    "onnxruntime",
    "pandas",
    "psutil",
    "pybind11>=2.12.0",
    "pytest",
    "pytest-cov",
    "ruff",
    "scikit-learn>=1.3.0",
    "skl2onnx>=1.14.1",
    "sphinx",
    "sphinx-gallery",
    "sphinx-issues",
    "sphinx-runpython",
    "tqdm",
    "wheel",
]

[build-system]
requires = [
    "abi3audit; sys_platform == 'linux'",
    "auditwheel-symbols; sys_platform == 'linux'",
    "Cython>=3.0.10",
    "cmake",
    "numpy>=2.0",
    "pybind11>=2.12.0",
    "scikit-learn>=1.3.0",
    "scipy",
    "setuptools",
    "wheel",
]

[tool.rstcheck]
report_level = "INFO"
ignore_directives = [
    "autoclass",
    "autofunction",
    "exreflist",
    "faqreflist",
    "gdot",
    "ifconfig",
    "image-sg",
    "plot",
    "runpython",
]
ignore_roles = ["epkg", "pr"]
ignore_messages = "Hyperlink target \"blog-internal-api-impurity-improvement\" is not referenced"

[tool.setuptools.packages.find]
namespaces = false

[tool.setuptools.package-data]
"*" = ["*.cc", "*.cpp", "*.cu", "*.cuh", "*.dll", "*.dylib", "*.h", "*.hpp", "*.pyd", "*.so*"]

[tool.cibuildwheel]
build = "*"
manylinux-x86_64-image = "manylinux2014"

[tool.cibuildwheel.linux]
archs = ["x86_64"]
build = "cp*"
skip = "cp36-* cp37-* cp38-* cp39-* cp313-* cp314-* pypy* *musllinux*"
manylinux-x86_64-image = "manylinux2014"
before-build = "pip install auditwheel-symbols abi3audit"
build-verbosity = 1
repair-wheel-command = "auditwheel-symbols --manylinux 2014 {wheel} ; abi3audit {wheel} ; auditwheel repair -w {dest_dir} {wheel} || exit 0"
# repair-wheel-command = "auditwheel-symbols --manylinux 2014 {wheel} || exit 0"

[tool.cibuildwheel.macos]
archs = ["arm64", "universal2"]
build = "cp*"
skip = "cp36-* cp37-* cp38-* cp39-* cp313-* cp314-* pypy* pp*"
before-build = "brew install libomp llvm&&echo 'export PATH=\"/opt/homebrew/opt/llvm/bin:$PATH\"' >> /Users/runner/.bash_profile"

[tool.cibuildwheel.windows]
archs = ["AMD64"]
build = "cp*"
skip = "cp36-* cp37-* cp38-* cp39-* cp313-* cp314-* pypy*"

[tool.cython-lint]
max-line-length = 88

[tool.mypy]
ignore_missing_imports = true
packages = ["mlinsights"]
exclude = [
    "^_doc/examples",  # skips examples in the documentation
    "^_unittests",  # skips unit tests
    "^build",  # skips build
    "^dist",  # skips dist
]

[[tool.mypy.overrides]]
module = ["mlinsights.ext_test_case"]
disable_error_code = ["override", "index"]

[tool.ruff]
exclude = [".eggs", ".git", "build", "dist"]
line-length = 88

[tool.ruff.lint]
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    #"D", # pydocstyle
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    #"I", # isort
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    #"N", # pep8-naming
    #"NPY", # modern numpy
    #"PERF", # Perflint
    "PIE", # flake8-pie
    "PYI", # flake8-pyi
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "SLOT", # flake8-slot
    "T10", # flake8-debugger
    #"TID", # Disallow relative imports
    #"TRY", # flake8-try-except-raise
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]

[tool.ruff.lint.per-file-ignores]
"**" = [
    "B905",
    "C401", "C408", "C413",
    "RUF012", "RUF100", "RUF010",
    "SIM108", "SIM910", "SIM110", "SIM102", "SIM114", "SIM103", "UP015",
    "UP027", "UP031", "UP034", "UP032", "UP006", "UP035", "UP007", "UP038"
]
"**/plot*.py" = ["B018"]
"_unittests/**.py" = ["B904", "RUF015", "C400"]
"_unittests/ut_plotting/test_dot.py" = ["E501"]
"mlinsights/mlbatch/__init__.py" = ["F401"]
"mlinsights/metrics/__init__.py" = ["F401"]
"mlinsights/mlmodel/kmeans_l1.py" = ["E731"]
"mlinsights/mlmodel/__init__.py" = ["F401"]
"mlinsights/mltree/__init__.py" = ["F401"]
"mlinsights/plotting/__init__.py" = ["F401"]
"mlinsights/search_rank/__init__.py" = ["F401"]
"mlinsights/sklapi/__init__.py" = ["F401"]
"mlinsights/timeseries/__init__.py" = ["F401"]
